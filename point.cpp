#include <stdio.h>

// 所有指针变量在64位上为8字节,32位上为4字节,但不能混着用,因为不同类型指针的操作权限不同,如char*只操作一个字节,只能位移一个字节
int main()
{
    // 指向字符串的指针
    char c[] = "hello";
    char *cp1 = c;
    *(cp1 + 1) = 'x';
    printf("\n指向字符串的指针==%s \n\n", c);
    /*
    // 指向字符串的指针 直接指向
    char *cp2 = "hello";
    printf("指向字符串的指针==%s \n", *cp2); // 可读
    *(cp2 + 1) = 'x';
    printf("指向字符串的指针==%s \n", *cp2); // 不可写
    */

    // 指向数组(首地址)的指针  数组首地址=数组自身地址=指向该数组的指针的地址
    int a[] = {10, 20, 30, 40};
    int *pa = a;
    printf("指向数组的指针==pa地址(指向数组a的首元素地址)：%p || 数组a的首地址：%p || 数组a的地址：%p || a的首元素元素：%d\n\n", pa, &a[0], &a, *pa);

    // 取地址后存入  地址的地址
    int **ppa = &pa;
    // printf("%p\n", &pa);

    // 指针数组 是个数组，有自己本身的地址
    int n1 = 100, n2 = 200, n3 = 300;
    int *p1 = &n1, *p2 = &n2, *p3 = &n3;
    int *nps[] = {p1, p2, p3};
    printf("指针数组====nps地址(数组自己的地址):%p ||首元素地址：%p || 首元素的值p1(n1的地址)：%p || n1地址：%p || n1的值:%d \n\n", &nps, nps, nps[0], &n1, *nps[0]);

    // 数组指针 二维数组指针
    int b[][3] = {
        {00, 01, 02},
        {10, 11, 12},
        {20, 21, 22}};
    int(*pb)[3] = b;
    printf("======二维数组======");
    for (int i = 0; i < 3; i++)
    {
        printf("\n");
        for (int j = 0; j < 3; j++)
        {
            printf("[%d][%d] : %d ", i, j, *(*(pb + i) + j));
        }
    }
}
